<?php
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License version 3.0
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/AFL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License version 3.0
 */

namespace PrestaShop\Module\PrestashopCheckout\Serializer\Normalizer;

use ReflectionClass;
use Symfony\Component\Serializer\Normalizer\AbstractObjectNormalizer as SymfonyAbstractObjectNormalizer;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer as SymfonyObjectNormalizer;
use Symfony\Component\Serializer\SerializerInterface;

/**
 * Adds support of the `skip_null_values` context option to the legacy Symfony ObjectNormalizer.
 */
class ObjectNormalizer extends SymfonyAbstractObjectNormalizer
{
    /**
     * Flag to control whether fields with the value `null` should be output
     * when normalizing or omitted.
     */
    public const PS_SKIP_NULL_VALUES = 'skip_null_values';

    /**
     * @var SymfonyObjectNormalizer
     */
    private $objectNormalizer;

    /**
     * @param SymfonyObjectNormalizer $objectNormalizer
     */
    public function __construct(SymfonyObjectNormalizer $objectNormalizer)
    {
        $this->objectNormalizer = $objectNormalizer;
    }

    /**
     * {@inheritdoc}
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = $this->objectNormalizer->normalize($object, $format, $context);

        if (!defined('\Symfony\Component\Serializer\Normalizer\AbstractObjectNormalizer::SKIP_NULL_VALUES')
            && isset($context[self::PS_SKIP_NULL_VALUES])
            && $context[self::PS_SKIP_NULL_VALUES]
        ) {
            foreach ($data as $key => $value) {
                if (null === $value) {
                    unset($data[$key]);
                }
            }
        }

        return $data;
    }

    /**
     * {@inheritdoc}
     */
    public function supportsNormalization($data, $format = null)
    {
        return $this->objectNormalizer->supportsNormalization($data, $format);
    }

    /**
     * {@inheritdoc}
     */
    protected function getAttributes($object, $format, array $context)
    {
        return $this->objectNormalizer->getAttributes($object, $format, $context);
    }

    /**
     * {@inheritdoc}
     */
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $this->objectNormalizer->supportsDenormalization($data, $type, $format);
    }

    /**
     * {@inheritdoc}
     */
    public function denormalize($data, $type, $format = null, array $context = [])
    {
        return $this->objectNormalizer->denormalize($data, $type, $format, $context);
    }

    /**
     * {@inheritdoc}
     */
    protected function denormalizeParameter(ReflectionClass $class, \ReflectionParameter $parameter, $parameterName, $parameterData, array $context, $format = null)
    {
        return $this->objectNormalizer->denormalizeParameter($class, $parameter, $parameterName, $parameterData, $context, $format);
    }

    /**
     * {@inheritdoc}
     */
    protected function createChildContext(array $parentContext, $attribute)
    {
        return parent::createChildContext($parentContext, $attribute); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function setCircularReferenceLimit($circularReferenceLimit)
    {
        return $this->objectNormalizer->setCircularReferenceLimit($circularReferenceLimit);
    }

    /**
     * {@inheritdoc}
     */
    public function setCircularReferenceHandler(callable $circularReferenceHandler)
    {
        return $this->objectNormalizer->setCircularReferenceHandler($circularReferenceHandler);
    }

    /**
     * {@inheritdoc}
     */
    public function setCallbacks(array $callbacks)
    {
        return $this->objectNormalizer->setCallbacks($callbacks);
    }

    /**
     * {@inheritdoc}
     */
    public function setIgnoredAttributes(array $ignoredAttributes)
    {
        return $this->objectNormalizer->setIgnoredAttributes($ignoredAttributes);
    }

    /**
     * {@inheritdoc}
     */
    protected function isCircularReference($object, &$context)
    {
        return $this->objectNormalizer->isCircularReference($object, $context);
    }

    /**
     * {@inheritdoc}
     */
    protected function handleCircularReference($object)
    {
        return $this->objectNormalizer->handleCircularReference($object);
    }

    /**
     * {@inheritdoc}
     */
    protected function getAllowedAttributes($classOrObject, array $context, $attributesAsString = false)
    {
        return $this->objectNormalizer->getAllowedAttributes($classOrObject, $context, $attributesAsString);
    }

    /**
     * {@inheritdoc}
     */
    protected function isAllowedAttribute($classOrObject, $attribute, $format = null, array $context = [])
    {
        return $this->objectNormalizer->isAllowedAttribute($classOrObject, $attribute, $format, $context);
    }

    /**
     * {@inheritdoc}
     */
    protected function prepareForDenormalization($data)
    {
        return $this->objectNormalizer->prepareForDenormalization($data);
    }

    /**
     * {@inheritdoc}
     */
    protected function getConstructor(array &$data, $class, array &$context, ReflectionClass $reflectionClass, $allowedAttributes)
    {
        return $this->objectNormalizer->getConstructor($data, $class, $context, $reflectionClass, $allowedAttributes);
    }

    /**
     * {@inheritdoc}
     */
    protected function instantiateObject(array &$data, $class, array &$context, ReflectionClass $reflectionClass, $allowedAttributes)
    {
        return $this->objectNormalizer->instantiateObject($data, $class, $context, $reflectionClass, $allowedAttributes);
    }

    /**
     * {@inheritdoc}
     */
    protected function extractObjectToPopulate($class, array $context, $key = null)
    {
        return $this->objectNormalizer->extractObjectToPopulate($class, $context, $key);
    }

    /**
     * {@inheritdoc}
     */
    public function setSerializer(SerializerInterface $serializer)
    {
        $this->objectNormalizer->setSerializer($serializer);
    }

    /**
     * {@inheritdoc}
     */
    protected function extractAttributes($object, $format = null, array $context = [])
    {
        return $this->objectNormalizer->extractAttributes($object, $format, $context);
    }

    /**
     * {@inheritdoc}
     */
    protected function getAttributeValue($object, $attribute, $format = null, array $context = [])
    {
        return $this->objectNormalizer->getAttributeValue($object, $attribute, $format, $context);
    }

    /**
     * {@inheritdoc}
     */
    protected function setAttributeValue($object, $attribute, $value, $format = null, array $context = [])
    {
        $this->objectNormalizer->setAttributeValue($object, $attribute, $value, $format, $context);
    }
}
