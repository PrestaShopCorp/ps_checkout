name: Push to GitHub repository

on:
  workflow_call:
    inputs:
      env-upper:
        required: true
        type: string
      env-lower:
        required: true
        type: string
      triggered:
        required: true
        type: boolean
      repository-name:
        required: true
        type: string
        default: "ps_checkout"
      prestashop-version:
        required: true
        type: string
      pr-number:
        required: true
        type: string

jobs:
  current_date:
    name: Get current date
    runs-on: ubuntu-latest
    if: inputs.triggered == true
    outputs:
      date: ${{ steps.date.outputs.date }}

    steps:
      - name: Date
        id: date
        run: echo "date=$(date -d '+2 hours' +'%Y-%m-%d_%H-%M-%S')" >> "$GITHUB_OUTPUT"

  push-to-repository:
    name: ${{ inputs.env-upper }} - Create zip file and push to GitHub repository
    runs-on: ubuntu-latest
    environment: ${{ inputs.env-lower }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    if: inputs.triggered == true
    env:
      ZIP_NAME: ${{ inputs.repository-name && (inputs.env-lower != 'production' && '-' && inputs.prestashop-version && '-' && inputs.env-lower && '-pr' && github.event.number && '-' && needs.current_date.outputs.date) }}.zip

    steps:
      - name: Checkout the repository 🎁
        uses: actions/checkout@v4

      - name: Auth GCP
        uses: ./.github/actions/auth-gcp
        with:
          auth-mode: "workload-federation"
          provider: ${{ secrets[format('WI_PROVIDER_V2_{0}', inputs.env-upper)] }}
          service-account: ${{ secrets[format('WI_SA_V2_{0}', inputs.env-upper)] }}
          registry-login: true
          setup-gcloud: true

      - name: Write .env file
        run: gcloud --quiet beta secrets versions access latest --project=$GCP_PROJECT --secret="module-env" > .env
        env:
          GCP_PROJECT: ${{ secrets[format('GCP_PROJECT_{0}', inputs.env-upper)] }}

      - name: Install composer dependencies
        run: composer install --no-dev -o

      - name: Create directory with repo name and move files
        run: |
          repo_name="${{ inputs.repository-name }}"
          mkdir "$repo_name"
          shopt -s dotglob nullglob
          for file in *; do
            if [ "$file" != "$repo_name" ]; then
              mv "$file" "$repo_name/"
            fi
          done

      - name: Workaround actions/upload-artifact#176
        run: |
          echo "artifacts_path=$(realpath ..)" >> $GITHUB_ENV

      - name: Create & upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.artifacts_path }}
          include-hidden-files: true
          retention-days: ${{ (inputs.env-lower == 'production' && 90) || 1 }}

      - name: Move files at root project
        run: |
          cd "${{ inputs.repository-name }}"
          shopt -s dotglob nullglob
          for file in *; do
            mv "$file" ../
          done
          cd ../
          rm -Rf "${{ inputs.repository-name }}"
